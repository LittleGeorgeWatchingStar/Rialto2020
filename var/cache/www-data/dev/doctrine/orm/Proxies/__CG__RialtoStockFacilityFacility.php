<?php

namespace Proxies\__CG__\Rialto\Stock\Facility;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Facility extends \Rialto\Stock\Facility\Facility implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'id', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'parentLocation', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'name', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'address', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'phone', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'fax', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'email', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'contactName', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'supplier', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'active', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'allocateFromCM', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'taxAuthority', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'new'];
        }

        return ['__isInitialized__', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'id', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'parentLocation', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'name', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'address', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'phone', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'fax', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'email', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'contactName', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'supplier', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'active', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'allocateFromCM', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'taxAuthority', '' . "\0" . 'Rialto\\Stock\\Facility\\Facility' . "\0" . 'new'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Facility $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', []);

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress(\Rialto\Geography\Address\Address $address = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', [$address]);

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getStreet1(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreet1', []);

        return parent::getStreet1();
    }

    /**
     * {@inheritDoc}
     */
    public function getStreet2(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreet2', []);

        return parent::getStreet2();
    }

    /**
     * {@inheritDoc}
     */
    public function getMailStop(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMailStop', []);

        return parent::getMailStop();
    }

    /**
     * {@inheritDoc}
     */
    public function getCity(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCity', []);

        return parent::getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function getStateName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStateName', []);

        return parent::getStateName();
    }

    /**
     * {@inheritDoc}
     */
    public function getStateCode(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStateCode', []);

        return parent::getStateCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getPostalCode(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostalCode', []);

        return parent::getPostalCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getCountryCode(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountryCode', []);

        return parent::getCountryCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getCountryName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountryName', []);

        return parent::getCountryName();
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplier', []);

        return parent::getSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function hasSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSupplier', []);

        return parent::hasSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function setSupplier(\Rialto\Purchasing\Supplier\Supplier $supplier = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSupplier', [$supplier]);

        return parent::setSupplier($supplier);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxAuthority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxAuthority', []);

        return parent::getTaxAuthority();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxAuthority(\Rialto\Tax\Authority\TaxAuthority $auth = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxAuthority', [$auth]);

        return parent::setTaxAuthority($auth);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone($phone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$phone]);

        return parent::setPhone($phone);
    }

    /**
     * {@inheritDoc}
     */
    public function getFax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFax', []);

        return parent::getFax();
    }

    /**
     * {@inheritDoc}
     */
    public function setFax($fax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFax', [$fax]);

        return parent::setFax($fax);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getContactName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContactName', []);

        return parent::getContactName();
    }

    /**
     * {@inheritDoc}
     */
    public function setContactName($contactName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContactName', [$contactName]);

        return parent::setContactName($contactName);
    }

    /**
     * {@inheritDoc}
     */
    public function getContact()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact', []);

        return parent::getContact();
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function isAllocateFromCM()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAllocateFromCM', []);

        return parent::isAllocateFromCM();
    }

    /**
     * {@inheritDoc}
     */
    public function equals(\Rialto\Stock\Location $other = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'equals', [$other]);

        return parent::equals($other);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentLocation', []);

        return parent::getParentLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentLocation(\Rialto\Stock\Facility\Facility $parentLocation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentLocation', [$parentLocation]);

        return parent::setParentLocation($parentLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function validateParentLocation(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validateParentLocation', [$context]);

        return parent::validateParentLocation($context);
    }

    /**
     * {@inheritDoc}
     */
    public function isColocatedWith(\Rialto\Stock\Facility\Facility $other = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isColocatedWith', [$other]);

        return parent::isColocatedWith($other);
    }

    /**
     * {@inheritDoc}
     */
    public function isSublocationOf(\Rialto\Stock\Facility\Facility $other = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSublocationOf', [$other]);

        return parent::isSublocationOf($other);
    }

    /**
     * {@inheritDoc}
     */
    public function setAllocateFromCM($allocate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllocateFromCM', [$allocate]);

        return parent::setAllocateFromCM($allocate);
    }

    /**
     * {@inheritDoc}
     */
    public function isHeadquarters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHeadquarters', []);

        return parent::isHeadquarters();
    }

    /**
     * {@inheritDoc}
     */
    public function isProductTesting()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isProductTesting', []);

        return parent::isProductTesting();
    }

    /**
     * {@inheritDoc}
     */
    public function canSupply(\Rialto\Stock\Facility\Facility $other)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canSupply', [$other]);

        return parent::canSupply($other);
    }

    /**
     * {@inheritDoc}
     */
    public function isNew()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNew', []);

        return parent::isNew();
    }

    /**
     * {@inheritDoc}
     */
    public function setNew()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNew', []);

        return parent::setNew();
    }

}
