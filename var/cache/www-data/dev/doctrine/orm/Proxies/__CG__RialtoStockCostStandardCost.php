<?php

namespace Proxies\__CG__\Rialto\Stock\Cost;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StandardCost extends \Rialto\Stock\Cost\StandardCost implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'id', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'stockItem', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'materialCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'labourCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'overheadCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'previousCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'startDate', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'memo'];
        }

        return ['__isInitialized__', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'id', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'stockItem', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'materialCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'labourCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'overheadCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'previousCost', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'startDate', '' . "\0" . 'Rialto\\Stock\\Cost\\StandardCost' . "\0" . 'memo'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StandardCost $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockItem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockItem', []);

        return parent::getStockItem();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockCode', []);

        return parent::getStockCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getMaterialCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaterialCost', []);

        return parent::getMaterialCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaterialCost($materialCost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaterialCost', [$materialCost]);

        return parent::setMaterialCost($materialCost);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabourCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabourCost', []);

        return parent::getLabourCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabourCost($labourCost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabourCost', [$labourCost]);

        return parent::setLabourCost($labourCost);
    }

    /**
     * {@inheritDoc}
     */
    public function getOverheadCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOverheadCost', []);

        return parent::getOverheadCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setOverheadCost($overheadCost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOverheadCost', [$overheadCost]);

        return parent::setOverheadCost($overheadCost);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalCost', []);

        return parent::getTotalCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getPreviousCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreviousCost', []);

        return parent::getPreviousCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrevious(\Rialto\Stock\Cost\StandardCost $previous = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrevious', [$previous]);

        return parent::setPrevious($previous);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartDate', []);

        return parent::getStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartDate(\DateTime $startDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartDate', [$startDate]);

        return parent::setStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntities()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntities', []);

        return parent::getEntities();
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setQtyInStock($qtyInStock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQtyInStock', [$qtyInStock]);

        return parent::setQtyInStock($qtyInStock);
    }

    /**
     * {@inheritDoc}
     */
    public function getMemo(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMemo', []);

        return parent::getMemo();
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriod', []);

        return parent::getPeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function getSystemType(): \Rialto\Accounting\Transaction\SystemType
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystemType', []);

        return parent::getSystemType();
    }

    /**
     * {@inheritDoc}
     */
    public function getSystemTypeNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystemTypeNumber', []);

        return parent::getSystemTypeNumber();
    }

}
