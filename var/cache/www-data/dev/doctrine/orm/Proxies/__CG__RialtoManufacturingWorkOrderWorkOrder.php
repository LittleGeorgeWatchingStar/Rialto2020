<?php

namespace Proxies\__CG__\Rialto\Manufacturing\WorkOrder;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WorkOrder extends \Rialto\Manufacturing\WorkOrder\WorkOrder implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'qtyIssued', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'customization', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'parent', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'child', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'instructions', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'rework', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'requirements', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'issues', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'dirty', 'purchaseOrder', 'purchasingData', 'version', 'description', 'qtyOrdered', 'boardsPerPanel', 'allocations'];
        }

        return ['__isInitialized__', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'qtyIssued', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'customization', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'parent', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'child', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'instructions', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'rework', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'requirements', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'issues', '' . "\0" . 'Rialto\\Manufacturing\\WorkOrder\\WorkOrder' . "\0" . 'dirty', 'purchaseOrder', 'purchasingData', 'version', 'description', 'qtyOrdered', 'boardsPerPanel', 'allocations'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WorkOrder $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function bomExists()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'bomExists', []);

        return parent::bomExists();
    }

    /**
     * {@inheritDoc}
     */
    public function getBom(): \Rialto\Manufacturing\Bom\Bom
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBom', []);

        return parent::getBom();
    }

    /**
     * {@inheritDoc}
     */
    public function validateBom(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validateBom', [$context]);

        return parent::validateBom($context);
    }

    /**
     * {@inheritDoc}
     */
    public function canBeIssued()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canBeIssued', []);

        return parent::canBeIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function canBeSent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canBeSent', []);

        return parent::canBeSent();
    }

    /**
     * {@inheritDoc}
     */
    public function isSent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSent', []);

        return parent::isSent();
    }

    /**
     * {@inheritDoc}
     */
    public function setSent($sender, $note)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSent', [$sender, $note]);

        return parent::setSent($sender, $note);
    }

    /**
     * {@inheritDoc}
     */
    public function canBeReceived()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canBeReceived', []);

        return parent::canBeReceived();
    }

    /**
     * {@inheritDoc}
     */
    public function isTurnkey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTurnkey', []);

        return parent::isTurnkey();
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Rialto\Manufacturing\WorkOrder\WorkOrder $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function hasChild()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasChild', []);

        return parent::hasChild();
    }

    /**
     * {@inheritDoc}
     */
    public function getChild()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChild', []);

        return parent::getChild();
    }

    /**
     * {@inheritDoc}
     */
    public function getFamily()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamily', []);

        return parent::getFamily();
    }

    /**
     * {@inheritDoc}
     */
    public function hasPurchaseOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPurchaseOrder', []);

        return parent::hasPurchaseOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function hasSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSupplier', []);

        return parent::hasSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchaseOrderNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchaseOrderNumber', []);

        return parent::getPurchaseOrderNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function isForSameOrder(\Rialto\Allocation\Consumer\StockConsumer $other)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isForSameOrder', [$other]);

        return parent::isForSameOrder($other);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocationStatus(): \Rialto\Allocation\Status\AllocationStatus
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocationStatus', []);

        return parent::getAllocationStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocationStatusString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocationStatusString', []);

        return parent::getAllocationStatusString();
    }

    /**
     * {@inheritDoc}
     */
    public function isKitComplete(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isKitComplete', []);

        return parent::isKitComplete();
    }

    /**
     * {@inheritDoc}
     */
    public function getRequirements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequirements', []);

        return parent::getRequirements();
    }

    /**
     * {@inheritDoc}
     */
    public function getRequirementStatuses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequirementStatuses', []);

        return parent::getRequirementStatuses();
    }

    /**
     * {@inheritDoc}
     */
    public function createRequirement(\Rialto\Stock\Item\PhysicalStockItem $component, $unitQty, \Rialto\Manufacturing\WorkType\WorkType $workType): \Rialto\Manufacturing\Requirement\Requirement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createRequirement', [$component, $unitQty, $workType]);

        return parent::createRequirement($component, $unitQty, $workType);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRequirement(\Rialto\Manufacturing\Requirement\Requirement $woReq)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRequirement', [$woReq]);

        return parent::removeRequirement($woReq);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRequirements(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRequirements', []);

        return parent::hasRequirements();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRequirement(\Rialto\Stock\Item $item): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRequirement', [$item]);

        return parent::hasRequirement($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequirement(\Rialto\Stock\Item $item): \Rialto\Manufacturing\Requirement\Requirement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequirement', [$item]);

        return parent::getRequirement($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkTypesNeeded(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkTypesNeeded', []);

        return parent::getWorkTypesNeeded();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrepWorkAtLocation(\Rialto\Stock\Facility\Facility $location): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrepWorkAtLocation', [$location]);

        return parent::getPrepWorkAtLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomizedBom(\Rialto\Manufacturing\Customization\Customizer $customizer): \Rialto\Manufacturing\Bom\Bom
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomizedBom', [$customizer]);

        return parent::getCustomizedBom($customizer);
    }

    /**
     * {@inheritDoc}
     */
    public function resetRequirements(\Rialto\Stock\ItemIndex $bom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resetRequirements', [$bom]);

        return parent::resetRequirements($bom);
    }

    /**
     * {@inheritDoc}
     */
    public function setChildRequirementVersionAndCustomization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildRequirementVersionAndCustomization', []);

        return parent::setChildRequirementVersionAndCustomization();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllComponents(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllComponents', []);

        return parent::getAllComponents();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRequestedAllocations(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRequestedAllocations', []);

        return parent::hasRequestedAllocations();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomization', []);

        return parent::getCustomization();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCustomizations(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCustomizations', []);

        return parent::hasCustomizations();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomization(\Rialto\Manufacturing\Customization\Customization $cust = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomization', [$cust]);

        return parent::setCustomization($cust);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdSummary(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdSummary', []);

        return parent::getIdSummary();
    }

    /**
     * {@inheritDoc}
     */
    public function getInstructions(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstructions', []);

        return parent::getInstructions();
    }

    /**
     * {@inheritDoc}
     */
    public function setInstructions($instructions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInstructions', [$instructions]);

        return parent::setInstructions($instructions);
    }

    /**
     * {@inheritDoc}
     */
    public function appendInstructions($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'appendInstructions', [$text]);

        return parent::appendInstructions($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocation', []);

        return parent::getLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function isLocation(\Rialto\Stock\Facility\Facility $location): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLocation', [$location]);

        return parent::isLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', []);

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function getStandardCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStandardCost', []);

        return parent::getStandardCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getStandardCostPerUnit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStandardCostPerUnit', []);

        return parent::getStandardCostPerUnit();
    }

    /**
     * {@inheritDoc}
     */
    public function isApprovedBySupplier(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isApprovedBySupplier', []);

        return parent::isApprovedBySupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function isRejectedBySupplier(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRejectedBySupplier', []);

        return parent::isRejectedBySupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function isPendingApproval(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPendingApproval', []);

        return parent::isPendingApproval();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullSku()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullSku', []);

        return parent::getFullSku();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionedStockCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionedStockCode', []);

        return parent::getVersionedStockCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyIssued()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyIssued', []);

        return parent::getQtyIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function addQtyIssued($qtyIssued)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addQtyIssued', [$qtyIssued]);

        return parent::addQtyIssued($qtyIssued);
    }

    /**
     * {@inheritDoc}
     */
    public function isIssued(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isIssued', []);

        return parent::isIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function isFullyIssued(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFullyIssued', []);

        return parent::isFullyIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function hasEverBeenIssued(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasEverBeenIssued', []);

        return parent::hasEverBeenIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function getIssues(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIssues', []);

        return parent::getIssues();
    }

    /**
     * {@inheritDoc}
     */
    public function addIssue(\Rialto\Manufacturing\WorkOrder\Issue\WorkOrderIssue $issue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIssue', [$issue]);

        return parent::addIssue($issue);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyUnissued()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyUnissued', []);

        return parent::getQtyUnissued();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyIssuedButNotReceived()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyIssuedButNotReceived', []);

        return parent::getQtyIssuedButNotReceived();
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalValueIssued()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalValueIssued', []);

        return parent::getTotalValueIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyInProcess()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyInProcess', []);

        return parent::getQtyInProcess();
    }

    /**
     * {@inheritDoc}
     */
    public function hasWorkInProcess(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasWorkInProcess', []);

        return parent::hasWorkInProcess();
    }

    /**
     * {@inheritDoc}
     */
    public function isInProcess(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInProcess', []);

        return parent::isInProcess();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyFailed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyFailed', []);

        return parent::getQtyFailed();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion(\Rialto\Stock\Item\Version\Version $version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function hasParent(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasParent', []);

        return parent::hasParent();
    }

    /**
     * {@inheritDoc}
     */
    public function cancel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cancel', []);

        return parent::cancel();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommitmentDate(\DateTime $date = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommitmentDate', [$date]);

        return parent::setCommitmentDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function setDirty(int $code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDirty', [$code]);

        return parent::setDirty($code);
    }

    /**
     * {@inheritDoc}
     */
    public function isDirty(int $code = 1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDirty', [$code]);

        return parent::isDirty($code);
    }

    /**
     * {@inheritDoc}
     */
    public function setClean()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClean', []);

        return parent::setClean();
    }

    /**
     * {@inheritDoc}
     */
    public function setQtyOrdered($newQty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQtyOrdered', [$newQty]);

        return parent::setQtyOrdered($newQty);
    }

    /**
     * {@inheritDoc}
     */
    public function validateQtyOrdered(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validateQtyOrdered', [$context]);

        return parent::validateQtyOrdered($context);
    }

    /**
     * {@inheritDoc}
     */
    public function isRework(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRework', []);

        return parent::isRework();
    }

    /**
     * {@inheritDoc}
     */
    public function setRework($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRework', [$bool]);

        return parent::setRework($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function getFlagOptions(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFlagOptions', []);

        return parent::getFlagOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function isApprovedToBuild(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isApprovedToBuild', []);

        return parent::isApprovedToBuild();
    }

    /**
     * {@inheritDoc}
     */
    public function setPurchasingData(\Rialto\Purchasing\Catalog\PurchasingData $purchData)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPurchasingData', [$purchData]);

        return parent::setPurchasingData($purchData);
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchasingData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchasingData', []);

        return parent::getPurchasingData();
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchaseOrder(): \Rialto\Purchasing\Order\PurchaseOrder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchaseOrder', []);

        return parent::getPurchaseOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function getBinSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBinSize', []);

        return parent::getBinSize();
    }

    /**
     * {@inheritDoc}
     */
    public function getBinStyle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBinStyle', []);

        return parent::getBinStyle();
    }

    /**
     * {@inheritDoc}
     */
    public function getCatalogNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCatalogNumber', []);

        return parent::getCatalogNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuotationNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuotationNumber', []);

        return parent::getQuotationNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getManufacturerCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManufacturerCode', []);

        return parent::getManufacturerCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getManufacturer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManufacturer', []);

        return parent::getManufacturer();
    }

    /**
     * {@inheritDoc}
     */
    public function getFlags(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFlags', []);

        return parent::getFlags();
    }

    /**
     * {@inheritDoc}
     */
    public function setFlags(array $flags): \Rialto\Purchasing\Producer\StockProducer
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFlags', [$flags]);

        return parent::setFlags($flags);
    }

    /**
     * {@inheritDoc}
     */
    public function addFlag(string $flag): \Rialto\Purchasing\Producer\StockProducer
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFlag', [$flag]);

        return parent::addFlag($flag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFlag(string $flag): \Rialto\Purchasing\Producer\StockProducer
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFlag', [$flag]);

        return parent::removeFlag($flag);
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchasePriceVarianceAccount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchasePriceVarianceAccount', []);

        return parent::getPurchasePriceVarianceAccount();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderNumber', []);

        return parent::getOrderNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getSku()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSku', []);

        return parent::getSku();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockCode', []);

        return parent::getStockCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockItem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockItem', []);

        return parent::getStockItem();
    }

    /**
     * {@inheritDoc}
     */
    public function isStockItem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStockItem', []);

        return parent::isStockItem();
    }

    /**
     * {@inheritDoc}
     */
    public function isVersioned()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVersioned', []);

        return parent::isVersioned();
    }

    /**
     * {@inheritDoc}
     */
    public function validateVersion(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validateVersion', [$context]);

        return parent::validateVersion($context);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyOrdered()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyOrdered', []);

        return parent::getQtyOrdered();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyReceived()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyReceived', []);

        return parent::getQtyReceived();
    }

    /**
     * {@inheritDoc}
     */
    public function addQtyReceived($qty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addQtyReceived', [$qty]);

        return parent::addQtyReceived($qty);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyRemaining()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyRemaining', []);

        return parent::getQtyRemaining();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyInvoiced()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyInvoiced', []);

        return parent::getQtyInvoiced();
    }

    /**
     * {@inheritDoc}
     */
    public function addQtyInvoiced($qtyInvoiced, $actualCost = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addQtyInvoiced', [$qtyInvoiced, $actualCost]);

        return parent::addQtyInvoiced($qtyInvoiced, $actualCost);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyUninvoiced()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyUninvoiced', []);

        return parent::getQtyUninvoiced();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceNumber', []);

        return parent::getSourceNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitStandardCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitStandardCost', []);

        return parent::getUnitStandardCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getStandardUnitCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStandardUnitCost', []);

        return parent::getStandardUnitCost();
    }

    /**
     * {@inheritDoc}
     */
    public function validateStandardCost(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validateStandardCost', [$context]);

        return parent::validateStandardCost($context);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitCost', []);

        return parent::getUnitCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getExpectedUnitCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpectedUnitCost', []);

        return parent::getExpectedUnitCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnitCost($cost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnitCost', [$cost]);

        return parent::setUnitCost($cost);
    }

    /**
     * {@inheritDoc}
     */
    public function initializeUnitCost($cost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'initializeUnitCost', [$cost]);

        return parent::initializeUnitCost($cost);
    }

    /**
     * {@inheritDoc}
     */
    public function validateUnitCost(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validateUnitCost', [$context]);

        return parent::validateUnitCost($context);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtendedCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtendedCost', []);

        return parent::getExtendedCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getActualCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActualCost', []);

        return parent::getActualCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', []);

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateUpdated', []);

        return parent::getDateUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateClosed', []);

        return parent::getDateClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestedDate', []);

        return parent::getRequestedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestedDate(\DateTime $date = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestedDate', [$date]);

        return parent::setRequestedDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDueDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDueDate', []);

        return parent::getDueDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommitmentDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommitmentDate', []);

        return parent::getCommitmentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function initializeCommitmentDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'initializeCommitmentDate', []);

        return parent::initializeCommitmentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function isOverdue(\DateTimeInterface $asOf = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOverdue', [$asOf]);

        return parent::isOverdue($asOf);
    }

    /**
     * {@inheritDoc}
     */
    public function isAutoReceive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAutoReceive', []);

        return parent::isAutoReceive();
    }

    /**
     * {@inheritDoc}
     */
    public function allowsZeroCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'allowsZeroCost', []);

        return parent::allowsZeroCost();
    }

    /**
     * {@inheritDoc}
     */
    public function isZeroCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isZeroCost', []);

        return parent::isZeroCost();
    }

    /**
     * {@inheritDoc}
     */
    public function isClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isClosed', []);

        return parent::isClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function isCompleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCompleted', []);

        return parent::isCompleted();
    }

    /**
     * {@inheritDoc}
     */
    public function reopen()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'reopen', []);

        return parent::reopen();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', []);

        return parent::setUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function isOrderSent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOrderSent', []);

        return parent::isOrderSent();
    }

    /**
     * {@inheritDoc}
     */
    public function isWorkOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isWorkOrder', []);

        return parent::isWorkOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function isLabour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLabour', []);

        return parent::isLabour();
    }

    /**
     * {@inheritDoc}
     */
    public function isLabourForItem(\Rialto\Stock\Item $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLabourForItem', [$item]);

        return parent::isLabourForItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function isNew()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNew', []);

        return parent::isNew();
    }

    /**
     * {@inheritDoc}
     */
    public function isPCB()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPCB', []);

        return parent::isPCB();
    }

    /**
     * {@inheritDoc}
     */
    public function isBoard()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBoard', []);

        return parent::isBoard();
    }

    /**
     * {@inheritDoc}
     */
    public function isProduct()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isProduct', []);

        return parent::isProduct();
    }

    /**
     * {@inheritDoc}
     */
    public function isCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCategory', [$category]);

        return parent::isCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getGLAccount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGLAccount', []);

        return parent::getGLAccount();
    }

    /**
     * {@inheritDoc}
     */
    public function setGLAccount(\Rialto\Accounting\Ledger\Account\GLAccount $account)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGLAccount', [$account]);

        return parent::setGLAccount($account);
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplier', []);

        return parent::getSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplierName', []);

        return parent::getSupplierName();
    }

    /**
     * {@inheritDoc}
     */
    public function resetUnitCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resetUnitCost', []);

        return parent::resetUnitCost();
    }

    /**
     * {@inheritDoc}
     */
    public function roundQtyOrdered()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'roundQtyOrdered', []);

        return parent::roundQtyOrdered();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceType', []);

        return parent::getSourceType();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceDescription', []);

        return parent::getSourceDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function isOpenForAllocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOpenForAllocation', []);

        return parent::isOpenForAllocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenForAllocation($open)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenForAllocation', [$open]);

        return parent::setOpenForAllocation($open);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyAvailableTo(\Rialto\Allocation\Requirement\RequirementCollection $requirements)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyAvailableTo', [$requirements]);

        return parent::getQtyAvailableTo($requirements);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteAllocationsForOtherLocations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deleteAllocationsForOtherLocations', []);

        return parent::deleteAllocationsForOtherLocations();
    }

    /**
     * {@inheritDoc}
     */
    public function setPurchaseOrder(\Rialto\Purchasing\Order\PurchaseOrder $po): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPurchaseOrder', [$po]);

        parent::setPurchaseOrder($po);
    }

    /**
     * {@inheritDoc}
     */
    public function getBoardsPerPanel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBoardsPerPanel', []);

        return parent::getBoardsPerPanel();
    }

    /**
     * {@inheritDoc}
     */
    public function setBoardsPerPanel($boardsPerPanel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBoardsPerPanel', [$boardsPerPanel]);

        return parent::setBoardsPerPanel($boardsPerPanel);
    }

    /**
     * {@inheritDoc}
     */
    public function getCanBeAllocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCanBeAllocated', []);

        return parent::getCanBeAllocated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCanBeAllocated(bool $newCanBeAllocated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCanBeAllocated', [$newCanBeAllocated]);

        return parent::setCanBeAllocated($newCanBeAllocated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUseThis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUseThis', []);

        return parent::getUseThis();
    }

    /**
     * {@inheritDoc}
     */
    public function setUseThis(bool $newUseThis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUseThis', [$newUseThis]);

        return parent::setUseThis($newUseThis);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocations', []);

        return parent::getAllocations();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocationsActiveAtFacility()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocationsActiveAtFacility', []);

        return parent::getAllocationsActiveAtFacility();
    }

    /**
     * {@inheritDoc}
     */
    public function createAllocation(\Rialto\Allocation\Requirement\Requirement $request)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createAllocation', [$request]);

        return parent::createAllocation($request);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllocation(\Rialto\Allocation\Allocation\StockAllocation $alloc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllocation', [$alloc]);

        return parent::removeAllocation($alloc);
    }

    /**
     * {@inheritDoc}
     */
    public function adjustAllocationsToMatchQtyRemaining()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'adjustAllocationsToMatchQtyRemaining', []);

        return parent::adjustAllocationsToMatchQtyRemaining();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyUnallocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyUnallocated', []);

        return parent::getQtyUnallocated();
    }

    /**
     * {@inheritDoc}
     */
    public function getNetQtyAllocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNetQtyAllocated', []);

        return parent::getNetQtyAllocated();
    }

    /**
     * {@inheritDoc}
     */
    public function equals(\Rialto\Allocation\Source\BasicStockSource $other = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'equals', [$other]);

        return parent::equals($other);
    }

    /**
     * {@inheritDoc}
     */
    public function isCompatibleWith(\Rialto\Allocation\Requirement\RequirementCollection $collection)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCompatibleWith', [$collection]);

        return parent::isCompatibleWith($collection);
    }

}
