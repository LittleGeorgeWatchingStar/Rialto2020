<?php

namespace Proxies\__CG__\Rialto\Purchasing\Manufacturer;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Manufacturer extends \Rialto\Purchasing\Manufacturer\Manufacturer implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'id', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'name', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'supplier', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'notes', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'conflictUrl', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'conflictFile', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'conflictFilename', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'smelterData', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'policy', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'dateUpdated', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'updatedBy', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'logoFile', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'logoFilename'];
        }

        return ['__isInitialized__', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'id', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'name', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'supplier', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'notes', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'conflictUrl', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'conflictFile', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'conflictFilename', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'smelterData', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'policy', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'dateUpdated', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'updatedBy', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'logoFile', '' . "\0" . 'Rialto\\Purchasing\\Manufacturer\\Manufacturer' . "\0" . 'logoFilename'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Manufacturer $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function equals(\Rialto\Purchasing\Manufacturer\Manufacturer $other = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'equals', [$other]);

        return parent::equals($other);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplier', []);

        return parent::getSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function setSupplier(\Rialto\Purchasing\Supplier\Supplier $supplier = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSupplier', [$supplier]);

        return parent::setSupplier($supplier);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', []);

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', [$notes]);

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function setConflictUrl(string $conflictUrl): \Rialto\Purchasing\Manufacturer\Manufacturer
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConflictUrl', [$conflictUrl]);

        return parent::setConflictUrl($conflictUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getConflictUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConflictUrl', []);

        return parent::getConflictUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function getConflictFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConflictFile', []);

        return parent::getConflictFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setConflictFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConflictFile', [$file]);

        return parent::setConflictFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function hasConflictFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasConflictFile', []);

        return parent::hasConflictFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setConflictFilename(string $filename): \Rialto\Purchasing\Manufacturer\Manufacturer
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConflictFilename', [$filename]);

        return parent::setConflictFilename($filename);
    }

    /**
     * {@inheritDoc}
     */
    public function getConflictFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConflictFilename', []);

        return parent::getConflictFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function hasConflictDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasConflictDocument', []);

        return parent::hasConflictDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function getLogoFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogoFile', []);

        return parent::getLogoFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogoFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogoFile', [$file]);

        return parent::setLogoFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogoFilename(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogoFilename', []);

        return parent::getLogoFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogoFilename(string $filename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogoFilename', [$filename]);

        return parent::setLogoFilename($filename);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLogoFile(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLogoFile', []);

        return parent::hasLogoFile();
    }

    /**
     * {@inheritDoc}
     */
    public function hasSmelterData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSmelterData', []);

        return parent::hasSmelterData();
    }

    /**
     * {@inheritDoc}
     */
    public function setSmelterData($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSmelterData', [$bool]);

        return parent::setSmelterData($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function getPolicy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPolicy', []);

        return parent::getPolicy();
    }

    /**
     * {@inheritDoc}
     */
    public function setPolicy($policy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPolicy', [$policy]);

        return parent::setPolicy($policy);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated(\Rialto\Security\User\User $updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updatedBy]);

        return parent::setUpdated($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateUpdated', []);

        return parent::getDateUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

}
