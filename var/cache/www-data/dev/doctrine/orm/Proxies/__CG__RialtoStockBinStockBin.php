<?php

namespace Proxies\__CG__\Rialto\Stock\Bin;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StockBin extends \Rialto\Stock\Bin\StockBin implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'events', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'id', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'stockItem', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'facility', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'transfer', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'quantity', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'newQty', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'binStyle', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'version', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'customization', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'manufacturer', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'manufacturerCode', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'purchaseCost', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'materialCost', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'shelfPosition', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'allocatable', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'allocatableUpdates', 'allocations'];
        }

        return ['__isInitialized__', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'events', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'id', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'stockItem', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'facility', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'transfer', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'quantity', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'newQty', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'binStyle', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'version', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'customization', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'manufacturer', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'manufacturerCode', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'purchaseCost', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'materialCost', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'shelfPosition', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'allocatable', '' . "\0" . 'Rialto\\Stock\\Bin\\StockBin' . "\0" . 'allocatableUpdates', 'allocations'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StockBin $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getAllocatable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocatable', []);

        return parent::getAllocatable();
    }

    /**
     * {@inheritDoc}
     */
    public function setAllocatable(bool $boolean)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllocatable', [$boolean]);

        return parent::setAllocatable($boolean);
    }

    /**
     * {@inheritDoc}
     */
    public function setAllocatableManual(bool $boolean, string $user, string $reason)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllocatableManual', [$boolean, $user, $reason]);

        return parent::setAllocatableManual($boolean, $user, $reason);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocatableUpdates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocatableUpdates', []);

        return parent::getAllocatableUpdates();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewQty($newQty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewQty', [$newQty]);

        return parent::setNewQty($newQty);
    }

    /**
     * {@inheritDoc}
     */
    public function setQtyDiff($diff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQtyDiff', [$diff]);

        return parent::setQtyDiff($diff);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyDiff()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyDiff', []);

        return parent::getQtyDiff();
    }

    /**
     * {@inheritDoc}
     */
    public function getNewQty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewQty', []);

        return parent::getNewQty();
    }

    /**
     * {@inheritDoc}
     */
    public function hasNewQty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasNewQty', []);

        return parent::hasNewQty();
    }

    /**
     * {@inheritDoc}
     */
    public function applyNewQty(\Rialto\Accounting\Transaction\Transaction $trans, $memo = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'applyNewQty', [$trans, $memo]);

        return parent::applyNewQty($trans, $memo);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocation', []);

        return parent::getLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function getFacility()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFacility', []);

        return parent::getFacility();
    }

    /**
     * {@inheritDoc}
     */
    public function isAtLocation(\Rialto\Stock\Location $location)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAtLocation', [$location]);

        return parent::isAtLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function isAtSublocationOf(\Rialto\Stock\Facility\Facility $facility)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAtSublocationOf', [$facility]);

        return parent::isAtSublocationOf($facility);
    }

    /**
     * {@inheritDoc}
     */
    public function setLocation(\Rialto\Stock\Location $location)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocation', [$location]);

        return parent::setLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function clearShelfPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearShelfPosition', []);

        return parent::clearShelfPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setShelfPosition(\Rialto\Stock\Shelf\ShelfPosition $pos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShelfPosition', [$pos]);

        return parent::setShelfPosition($pos);
    }

    /**
     * {@inheritDoc}
     */
    public function hasShelfPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasShelfPosition', []);

        return parent::hasShelfPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getShelfPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShelfPosition', []);

        return parent::getShelfPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function isInTransit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInTransit', []);

        return parent::isInTransit();
    }

    /**
     * {@inheritDoc}
     */
    public function getBinStyle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBinStyle', []);

        return parent::getBinStyle();
    }

    /**
     * {@inheritDoc}
     */
    public function setBinStyle(\Rialto\Stock\Bin\BinStyle $style)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBinStyle', [$style]);

        return parent::setBinStyle($style);
    }

    /**
     * {@inheritDoc}
     */
    public function isBinStyle($style)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBinStyle', [$style]);

        return parent::isBinStyle($style);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumLabels()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumLabels', []);

        return parent::getNumLabels();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function isNew()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNew', []);

        return parent::isNew();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyAvailableTo(\Rialto\Allocation\Requirement\RequirementCollection $requirements)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyAvailableTo', [$requirements]);

        return parent::getQtyAvailableTo($requirements);
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyAllocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyAllocated', []);

        return parent::getQtyAllocated();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyRemaining()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyRemaining', []);

        return parent::getQtyRemaining();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantity', []);

        return parent::getQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceNumber', []);

        return parent::getSourceNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getSku()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSku', []);

        return parent::getSku();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockCode', []);

        return parent::getStockCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getItemName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItemName', []);

        return parent::getItemName();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockItem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockItem', []);

        return parent::getStockItem();
    }

    /**
     * {@inheritDoc}
     */
    public function containsItem(\Rialto\Stock\Item $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'containsItem', [$item]);

        return parent::containsItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion(\Rialto\Stock\Item\Version\Version $version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomization', []);

        return parent::getCustomization();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomization(\Rialto\Manufacturing\Customization\Customization $customization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomization', [$customization]);

        return parent::setCustomization($customization);
    }

    /**
     * {@inheritDoc}
     */
    public function getFullSku()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullSku', []);

        return parent::getFullSku();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionedStockCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionedStockCode', []);

        return parent::getVersionedStockCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getItemVersion(): \Rialto\Stock\Item\Version\ItemVersion
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItemVersion', []);

        return parent::getItemVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getCountryOfOrigin(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountryOfOrigin', []);

        return parent::getCountryOfOrigin();
    }

    /**
     * {@inheritDoc}
     */
    public function getRohsStatus(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRohsStatus', []);

        return parent::getRohsStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function canBeSplit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canBeSplit', []);

        return parent::canBeSplit();
    }

    /**
     * {@inheritDoc}
     */
    public function split($qtyToSplit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'split', [$qtyToSplit]);

        return parent::split($qtyToSplit);
    }

    /**
     * {@inheritDoc}
     */
    public function isNeededAtCurrentLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNeededAtCurrentLocation', []);

        return parent::isNeededAtCurrentLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceDescription', []);

        return parent::getSourceDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceType', []);

        return parent::getSourceType();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabelWithQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabelWithQuantity', []);

        return parent::getLabelWithQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabelWithQtyAndVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabelWithQtyAndVersion', []);

        return parent::getLabelWithQtyAndVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabelWithLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabelWithLocation', []);

        return parent::getLabelWithLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function getLongDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLongDescription', []);

        return parent::getLongDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getManufacturer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManufacturer', []);

        return parent::getManufacturer();
    }

    /**
     * {@inheritDoc}
     */
    public function setManufacturer(\Rialto\Purchasing\Manufacturer\Manufacturer $manufacturer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManufacturer', [$manufacturer]);

        return parent::setManufacturer($manufacturer);
    }

    /**
     * {@inheritDoc}
     */
    public function getManufacturerCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManufacturerCode', []);

        return parent::getManufacturerCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setManufacturerCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManufacturerCode', [$code]);

        return parent::setManufacturerCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitCost', []);

        return parent::getUnitCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPurchaseCost($cost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPurchaseCost', [$cost]);

        return parent::setPurchaseCost($cost);
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchaseCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchaseCost', []);

        return parent::getPurchaseCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaterialCost($cost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaterialCost', [$cost]);

        return parent::setMaterialCost($cost);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaterialCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaterialCost', []);

        return parent::getMaterialCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitStandardCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitStandardCost', []);

        return parent::getUnitStandardCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getExtendedStandardCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtendedStandardCost', []);

        return parent::getExtendedStandardCost();
    }

    /**
     * {@inheritDoc}
     */
    public function popEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'popEvents', []);

        return parent::popEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function getCanBeAllocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCanBeAllocated', []);

        return parent::getCanBeAllocated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCanBeAllocated(bool $newCanBeAllocated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCanBeAllocated', [$newCanBeAllocated]);

        return parent::setCanBeAllocated($newCanBeAllocated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUseThis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUseThis', []);

        return parent::getUseThis();
    }

    /**
     * {@inheritDoc}
     */
    public function setUseThis(bool $newUseThis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUseThis', [$newUseThis]);

        return parent::setUseThis($newUseThis);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocations', []);

        return parent::getAllocations();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocationsActiveAtFacility()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocationsActiveAtFacility', []);

        return parent::getAllocationsActiveAtFacility();
    }

    /**
     * {@inheritDoc}
     */
    public function createAllocation(\Rialto\Allocation\Requirement\Requirement $request)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createAllocation', [$request]);

        return parent::createAllocation($request);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllocation(\Rialto\Allocation\Allocation\StockAllocation $alloc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllocation', [$alloc]);

        return parent::removeAllocation($alloc);
    }

    /**
     * {@inheritDoc}
     */
    public function adjustAllocationsToMatchQtyRemaining()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'adjustAllocationsToMatchQtyRemaining', []);

        return parent::adjustAllocationsToMatchQtyRemaining();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyUnallocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyUnallocated', []);

        return parent::getQtyUnallocated();
    }

    /**
     * {@inheritDoc}
     */
    public function getNetQtyAllocated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNetQtyAllocated', []);

        return parent::getNetQtyAllocated();
    }

    /**
     * {@inheritDoc}
     */
    public function equals(\Rialto\Allocation\Source\BasicStockSource $other = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'equals', [$other]);

        return parent::equals($other);
    }

    /**
     * {@inheritDoc}
     */
    public function isCompatibleWith(\Rialto\Allocation\Requirement\RequirementCollection $collection)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCompatibleWith', [$collection]);

        return parent::isCompatibleWith($collection);
    }

}
