<?php

namespace Proxies\__CG__\Rialto\Accounting\Transaction;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Transaction extends \Rialto\Accounting\Transaction\Transaction implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'id', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'systemType', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'groupNo', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'date', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'period', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'memo', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'entries', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'stockMoves', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'chequeNo'];
        }

        return ['__isInitialized__', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'id', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'systemType', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'groupNo', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'date', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'period', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'memo', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'entries', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'stockMoves', '' . "\0" . 'Rialto\\Accounting\\Transaction\\Transaction' . "\0" . 'chequeNo'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Transaction $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getMemo(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMemo', []);

        return parent::getMemo();
    }

    /**
     * {@inheritDoc}
     */
    public function setMemo($memo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMemo', [$memo]);

        return parent::setMemo($memo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriod(): \Rialto\Accounting\Period\Period
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriod', []);

        return parent::getPeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function getSystemType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystemType', []);

        return parent::getSystemType();
    }

    /**
     * {@inheritDoc}
     */
    public function getSystemTypeNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystemTypeNumber', []);

        return parent::getSystemTypeNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupNo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupNo', []);

        return parent::getGroupNo();
    }

    /**
     * {@inheritDoc}
     */
    public function setChequeNumber($chequeNo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChequeNumber', [$chequeNo]);

        return parent::setChequeNumber($chequeNo);
    }

    /**
     * {@inheritDoc}
     */
    public function addEntry(\Rialto\Accounting\Ledger\Account\GLAccount $account, float $amount, string $memo = NULL): \Rialto\Accounting\Ledger\Entry\GLEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEntry', [$account, $amount, $memo]);

        return parent::addEntry($account, $amount, $memo);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntries(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntries', []);

        return parent::getEntries();
    }

    /**
     * {@inheritDoc}
     */
    public function getMonetaryValue(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonetaryValue', []);

        return parent::getMonetaryValue();
    }

    /**
     * {@inheritDoc}
     */
    public function validate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', []);

        return parent::validate();
    }

    /**
     * {@inheritDoc}
     */
    public function isBalanced(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBalanced', []);

        return parent::isBalanced();
    }

    /**
     * {@inheritDoc}
     */
    public function addStockMove(\Rialto\Stock\Move\StockMove $move)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStockMove', [$move]);

        return parent::addStockMove($move);
    }

    /**
     * {@inheritDoc}
     */
    public function getStockMoves(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockMoves', []);

        return parent::getStockMoves();
    }

    /**
     * {@inheritDoc}
     */
    public function getMoveTotal(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoveTotal', []);

        return parent::getMoveTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function moveBin(\Rialto\Stock\Bin\StockBin $bin, \Rialto\Stock\Location $destination)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'moveBin', [$bin, $destination]);

        return parent::moveBin($bin, $destination);
    }

}
