<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'Rialto\Purchasing\Order\PurchaseOrderSender' shared autowired service.

$this->services['Rialto\\Purchasing\\Order\\PurchaseOrderSender'] = $instance = new \Rialto\Purchasing\Order\PurchaseOrderSender(${($_ = isset($this->services['Rialto\\Purchasing\\Order\\Attachment\\PurchaseOrderAttachmentGenerator']) ? $this->services['Rialto\\Purchasing\\Order\\Attachment\\PurchaseOrderAttachmentGenerator'] : $this->load('getPurchaseOrderAttachmentGeneratorService.php')) && false ?: '_'}, ${($_ = isset($this->services['Rialto\\Email\\Attachment\\AttachmentZipper']) ? $this->services['Rialto\\Email\\Attachment\\AttachmentZipper'] : $this->load('getAttachmentZipperService.php')) && false ?: '_'}, ${($_ = isset($this->services['Rialto\\Purchasing\\Order\\OrderPdfGenerator']) ? $this->services['Rialto\\Purchasing\\Order\\OrderPdfGenerator'] : $this->load('getOrderPdfGeneratorService.php')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->load('getTemplatingService.php')) && false ?: '_'}, ${($_ = isset($this->services['Rialto\\Email\\MailerInterface']) ? $this->services['Rialto\\Email\\MailerInterface'] : $this->load('getMailerInterfaceService.php')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->getDebug_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['Rialto\\Cms\\CmsEngine']) ? $this->services['Rialto\\Cms\\CmsEngine'] : $this->getCmsEngineService()) && false ?: '_'}, ${($_ = isset($this->services['Gumstix\\Storage\\FileStorage']) ? $this->services['Gumstix\\Storage\\FileStorage'] : $this->getFileStorageService()) && false ?: '_'});

$instance->setTokenStorage(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : ($this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage())) && false ?: '_'});

return $instance;
